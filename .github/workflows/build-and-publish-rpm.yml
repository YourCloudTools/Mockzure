name: Build and Publish RPM

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.actor != 'github-actions[bot]'
    outputs:
      tag_created: ${{ steps.tag.outputs.created }}
      tag_name: ${{ steps.tag.outputs.tag_name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create and push tag
        id: tag
        run: |
          # Generate timestamp-based tag
          TAG_NAME="v$(date +%Y%m%d.%H%M%S)"
          
          # Check if tag already exists (very unlikely but safety check)
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, skipping"
            echo "created=false" >> $GITHUB_OUTPUT
            echo "tag_name=" >> $GITHUB_OUTPUT
          else
            # Create and push tag
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
            
            echo "created=true" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "Created and pushed tag: $TAG_NAME"
          fi

  build-rpm:
    runs-on: ubuntu-latest
    needs: auto-tag
    if: always() && (needs.auto-tag.result == 'success' || needs.auto-tag.result == 'skipped' || github.event_name != 'push' || github.ref != 'refs/heads/main')
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
      version: ${{ steps.version.outputs.VERSION }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Verify coverage file exists
        id: coverage
        run: |
          if [ ! -f "coverage.out" ]; then
            echo "Coverage file not found, generating fresh coverage..."
            go test -coverprofile=coverage.out -covermode=atomic ./...
          fi
          
          # Extract coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | tail -1 | awk '{print $3}' | sed 's/%//')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

      - name: Install RPM build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Determine version
        id: version
        run: |
          # Always use timestamp-based versioning
          VERSION=$(date +%Y%m%d.%H%M%S)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Set up RPM build environment
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

      - name: Create source tarball
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          TEMP_DIR=$(mktemp -d)
          SRC_DIR="$TEMP_DIR/mockzure-${VERSION}"
          mkdir -p "$SRC_DIR"
          
          # Copy source files (include go.sum for module resolution)
          cp main.go go.mod go.sum config.yaml.example config.json.example "$SRC_DIR/"
          mkdir -p "$SRC_DIR/deploy/systemd"
          cp deploy/systemd/mockzure.service "$SRC_DIR/deploy/systemd/"
          
          # Create tarball
          cd "$TEMP_DIR"
          tar -czf ~/rpmbuild/SOURCES/mockzure-${VERSION}.tar.gz "mockzure-${VERSION}"
          rm -rf "$TEMP_DIR"

      - name: Build RPM package
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          cp deploy/rpm/mockzure.spec ~/rpmbuild/SPECS/
          
          rpmbuild -bb \
            --target x86_64 \
            --define "_version $VERSION" \
            --define "_topdir $HOME/rpmbuild" \
            --define "_unitdir /usr/lib/systemd/system" \
            ~/rpmbuild/SPECS/mockzure.spec

      - name: Find built RPM
        id: rpm
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          RPM_FILE=$(find ~/rpmbuild/RPMS/x86_64 -name "mockzure-${VERSION}*.rpm" | head -n 1)
          RPM_NAME=$(basename "$RPM_FILE")
          echo "RPM_FILE=$RPM_FILE" >> $GITHUB_OUTPUT
          echo "RPM_NAME=$RPM_NAME" >> $GITHUB_OUTPUT
          echo "Built RPM: $RPM_NAME"

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package
          path: ${{ steps.rpm.outputs.RPM_FILE }}

      - name: Attach RPM to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ steps.rpm.outputs.RPM_FILE }}

  publish-to-pages:
    needs: build-rpm
    runs-on: ubuntu-latest
    if: needs.build-rpm.result == 'success'
    env:
      COVERAGE: ${{ needs.build-rpm.outputs.coverage }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Download dependencies
        run: go mod download

      - name: Generate coverage for docs
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...

      - name: Download RPM artifact
        uses: actions/download-artifact@v4
        with:
          name: rpm-package
          path: ./artifacts

      - name: Prepare documentation
        run: |
          chmod +x bin/prepare-docs.sh
          ./bin/prepare-docs.sh --coverage-file coverage.out --docs-dir docs

      - name: Checkout gh-pages branch
        run: |
          # Fetch all branches including gh-pages
          git fetch origin
          
          # Clean untracked files and directories to avoid checkout conflicts
          git clean -fd || true
          
          # Stash any uncommitted changes to avoid checkout conflicts
          git stash push -m "Temporary stash before gh-pages checkout" || true
          
          # Check if gh-pages branch exists remotely
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            # Branch exists, checkout and reset to origin
            git checkout gh-pages || git checkout -b gh-pages origin/gh-pages
            git reset --hard origin/gh-pages
            
            # Keep existing RPMs, clean everything else
            if [ -d "rpms" ]; then
              mv rpms /tmp/rpms-backup
            fi
            
            git rm -rf . || true
            
            if [ -d "/tmp/rpms-backup" ]; then
              mkdir -p rpms
              mv /tmp/rpms-backup/* rpms/ || true
              rmdir /tmp/rpms-backup
            fi
          else
            # Branch doesn't exist, create orphan branch
            git checkout --orphan gh-pages
            git rm -rf . || true
          fi
          
          # Debug: List current directory contents
          echo "Current directory contents:"
          ls -la
          
          # Debug: List parent directory contents
          echo "Parent directory contents:"
          ls -la ../
          
          # Copy documentation from docs directory (from main branch checkout)
          # The docs directory is in the parent directory (main branch checkout)
          if [ -d "../docs" ]; then
            echo "Copying documentation files from ../docs..."
            cp -r ../docs/* .
            echo "Copied documentation files from ../docs"
          elif [ -d "docs" ]; then
            echo "Copying documentation files from docs..."
            cp -r docs/* .
            echo "Copied documentation files from docs"
          else
            echo "Warning: docs directory not found at ../docs or docs"
            echo "Current directory contents:"
            ls -la
            echo "Parent directory contents:"
            ls -la ../
          fi
          
          # Ensure index.html exists in root for GitHub Pages using script
          if [ ! -f "index.html" ]; then
            git checkout main -- scripts/create-gh-pages-index.sh || true
            chmod +x scripts/create-gh-pages-index.sh || true
            bash scripts/create-gh-pages-index.sh .
          fi
          
          # Final debug: List final directory contents
          echo "Final directory contents:"
          ls -la

      - name: Copy new RPM to rpms directory
        run: |
          mkdir -p rpms
          if compgen -G "artifacts/*.rpm" > /dev/null; then
            cp artifacts/*.rpm rpms/
          else
            echo "No RPM artifacts found to copy. Skipping RPM copy step."
          fi
          
          # Create a symlink to latest
          cd rpms
          LATEST_RPM=$(ls -t mockzure-*.rpm | head -n 1)
          ln -sf "$LATEST_RPM" mockzure-latest.rpm
          cd ..


      - name: Generate repository metadata
        run: |
          sudo apt-get update
          sudo apt-get install -y createrepo-c
          createrepo_c rpms/

      - name: Generate RPM repository page
        run: |
          mkdir -p rpms
          git checkout main -- scripts/create-gh-pages-index.sh || true
          chmod +x scripts/create-gh-pages-index.sh || true
          bash scripts/create-gh-pages-index.sh rpms

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push to gh-pages
        run: |
          git add .
          git status
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            VERSION="${{ needs.build-rpm.outputs.version }}"
            git commit -m "Publish RPM package version $VERSION"
            git push --force-with-lease origin gh-pages
          fi

      - name: Display Pages URL
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          REPO_OWNER="${GITHUB_REPOSITORY%/*}"
          echo "🚀 RPM repository published!"
          echo "📦 View at: https://${REPO_OWNER}.github.io/${REPO_NAME}/"

