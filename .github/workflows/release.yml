name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            output: mockzure-linux-amd64
          - goos: linux
            goarch: arm64
            output: mockzure-linux-arm64
          - goos: darwin
            goarch: amd64
            output: mockzure-darwin-amd64
          - goos: darwin
            goarch: arm64
            output: mockzure-darwin-arm64
          - goos: windows
            goarch: amd64
            output: mockzure-windows-amd64.exe
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w" -o ${{ matrix.output }} main.go

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}
          path: ${{ matrix.output }}
          retention-days: 1

  build-rpm:
    name: Build RPM Package
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install RPM build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build RPM
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Set up RPM build environment
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # Create source tarball
          TARBALL_NAME="mockzure-${VERSION}.tar.gz"
          TEMP_DIR=$(mktemp -d)
          SRC_DIR="$TEMP_DIR/mockzure-${VERSION}"
          mkdir -p "$SRC_DIR"
          
          # Copy source files
          cp main.go go.mod config.json.example "$SRC_DIR/"
          mkdir -p "$SRC_DIR/deploy/systemd"
          cp deploy/systemd/mockzure.service "$SRC_DIR/deploy/systemd/"
          
          # Create tarball
          cd "$TEMP_DIR"
          tar -czf ~/rpmbuild/SOURCES/$TARBALL_NAME "mockzure-${VERSION}"
          
          # Copy spec file
          cd $GITHUB_WORKSPACE
          cp deploy/rpm/mockzure.spec ~/rpmbuild/SPECS/
          
          # Build RPM
          rpmbuild -bb \
            --target x86_64 \
            --define "_version $VERSION" \
            --define "_topdir $HOME/rpmbuild" \
            --define "_unitdir /usr/lib/systemd/system" \
            ~/rpmbuild/SPECS/mockzure.spec
          
          # Find and copy the built RPM
          RPM_FILE=$(find ~/rpmbuild/RPMS/x86_64 -name "mockzure-${VERSION}*.rpm" | head -n 1)
          cp "$RPM_FILE" ./mockzure-${VERSION}.x86_64.rpm
          
          echo "RPM built: mockzure-${VERSION}.x86_64.rpm"

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: mockzure-rpm
          path: mockzure-*.x86_64.rpm
          retention-days: 1

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        continue-on-error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract repository owner (lowercase)
        id: repo
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "owner=$REPO_OWNER" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        continue-on-error: true
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          target: production
          tags: |
            ghcr.io/${{ steps.repo.outputs.owner }}/mockzure:latest
            ghcr.io/${{ steps.repo.outputs.owner }}/mockzure:${{ steps.version.outputs.tag }}
            ghcr.io/${{ steps.repo.outputs.owner }}/mockzure:${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.title=Mockzure
            org.opencontainers.image.description=Mock Azure Service for Development and Testing
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-rpm, build-docker]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy binaries
          cp artifacts/mockzure-linux-amd64/mockzure-linux-amd64 release-assets/
          cp artifacts/mockzure-linux-arm64/mockzure-linux-arm64 release-assets/
          cp artifacts/mockzure-darwin-amd64/mockzure-darwin-amd64 release-assets/
          cp artifacts/mockzure-darwin-arm64/mockzure-darwin-arm64 release-assets/
          cp artifacts/mockzure-windows-amd64.exe/mockzure-windows-amd64.exe release-assets/
          
          # Copy RPM
          cp artifacts/mockzure-rpm/*.rpm release-assets/
          
          # Make binaries executable (except Windows)
          chmod +x release-assets/mockzure-linux-*
          chmod +x release-assets/mockzure-darwin-*
          
          # List files
          ls -lh release-assets/

      - name: Extract repository owner (lowercase)
        id: repo
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "owner=$REPO_OWNER" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release-notes.md << 'EOF'
          ## Mockzure ${{ steps.version.outputs.tag }}
          
          ### Downloads
          
          #### Docker Image
          ```bash
          docker pull ghcr.io/${{ steps.repo.outputs.owner }}/mockzure:${{ steps.version.outputs.tag }}
          ```
          
          Multi-platform support: `linux/amd64`, `linux/arm64`
          
          #### Binaries
          Download the appropriate binary for your platform:
          - **Linux (amd64)**: `mockzure-linux-amd64`
          - **Linux (arm64)**: `mockzure-linux-arm64`
          - **macOS (amd64/Intel)**: `mockzure-darwin-amd64`
          - **macOS (arm64/Apple Silicon)**: `mockzure-darwin-arm64`
          - **Windows (amd64)**: `mockzure-windows-amd64.exe`
          
          #### RPM Package
          For RHEL/Fedora/Azure Linux systems:
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/mockzure-${{ steps.version.outputs.version }}.x86_64.rpm
          sudo dnf install -y mockzure-${{ steps.version.outputs.version }}.x86_64.rpm
          ```
          
          ### Quick Start
          
          ```bash
          # Download and run binary (Linux example)
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/mockzure-linux-amd64
          chmod +x mockzure-linux-amd64
          ./mockzure-linux-amd64
          ```
          
          Or use Docker:
          ```bash
          docker run -p 8090:8090 ghcr.io/${{ steps.repo.outputs.owner }}/mockzure:${{ steps.version.outputs.tag }}
          ```
          
          Access the web portal at: http://localhost:8090
          
          ### What's Included
          - Mock Azure Resource Manager API
          - Virtual Machine management (start/stop/restart)
          - Entra ID (Azure AD) user simulation
          - OAuth2/OIDC authentication endpoints
          - Service Principal support
          - Web-based management portal
          
          For full documentation, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

